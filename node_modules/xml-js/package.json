{
  "_args": [
    [
      {
        "raw": "xml-js",
        "scope": null,
        "escapedName": "xml-js",
        "name": "xml-js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Development/node/foscam"
    ]
  ],
  "_from": "xml-js@latest",
  "_id": "xml-js@1.2.2",
  "_inCache": true,
  "_location": "/xml-js",
  "_nodeVersion": "7.9.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/xml-js-1.2.2.tgz_1493286326648_0.5697351275011897"
  },
  "_npmUser": {
    "name": "nashwaan",
    "email": "ysf953@gmail.com"
  },
  "_npmVersion": "4.2.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "xml-js",
    "scope": null,
    "escapedName": "xml-js",
    "name": "xml-js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/xml-js/-/xml-js-1.2.2.tgz",
  "_shasum": "8443dbd71d3e384dc58dd38da4c9f4b92184fa3b",
  "_shrinkwrap": null,
  "_spec": "xml-js",
  "_where": "/Development/node/foscam",
  "author": {
    "name": "Yousuf Almarzooqi"
  },
  "bin": {
    "xml-js": "./bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/nashwaan/xml-js/issues"
  },
  "dependencies": {
    "sax": "^1.2.1"
  },
  "description": "A convertor between XML text and Javascript object / JSON text.",
  "devDependencies": {
    "biased-opener": "^0.2.8",
    "browser-sync": "^2.18.6",
    "cash-cat": "^0.2.0",
    "codacy-coverage": "^2.0.2",
    "codeclimate-test-reporter": "^0.4.0",
    "coveralls": "^2.13.0",
    "cross-env": "^4.0.0",
    "globify": "^2.0.0",
    "istanbul": "^0.4.5",
    "jasmine": "^2.6.0",
    "nodemon": "^1.11.0",
    "npm-run-all": "^4.0.1",
    "typescript": "^2.2.2",
    "watch": "^1.0.1"
  },
  "directories": {},
  "dist": {
    "shasum": "8443dbd71d3e384dc58dd38da4c9f4b92184fa3b",
    "tarball": "https://registry.npmjs.org/xml-js/-/xml-js-1.2.2.tgz"
  },
  "gitHead": "38043b3078627817b73993fd3317504061c2bea7",
  "homepage": "https://github.com/nashwaan/xml-js#readme",
  "keywords": [
    "XML",
    "xml",
    "js",
    "JSON",
    "json",
    "cdata",
    "CDATA",
    "doctype",
    "DOCTYPE",
    "Javascript",
    "js2xml",
    "json2xml",
    "xml2js",
    "xml2json",
    "transform",
    "transformer",
    "transforming",
    "transformation",
    "convert",
    "convertor",
    "converting",
    "conversion",
    "parse",
    "parser",
    "parsing"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "nashwaan",
      "email": "ysf953@gmail.com"
    }
  ],
  "name": "xml-js",
  "optionalDependencies": {},
  "readme": "![XML ⇔ JS/JSON](http://nashwaan.github.io/xml-js/images/logo.svg)\n\nConvert XML text to Javascript object / JSON text (and vice versa).\n\n[![Build Status](https://ci.appveyor.com/api/projects/status/0ky9f115m0f0r0gf?svg=true)](https://ci.appveyor.com/project/nashwaan/xml-js)\n[![Build Status](https://travis-ci.org/nashwaan/xml-js.svg?branch=master)](https://travis-ci.org/nashwaan/xml-js)\n[![Build Status](https://img.shields.io/circleci/project/nashwaan/xml-js.svg)](https://circleci.com/gh/nashwaan/xml-js)\n\n[![bitHound Overall Score](https://www.bithound.io/github/nashwaan/xml-js/badges/score.svg)](https://www.bithound.io/github/nashwaan/xml-js)\n[![Coverage Status](https://coveralls.io/repos/github/nashwaan/xml-js/badge.svg?branch=master)](https://coveralls.io/github/nashwaan/xml-js?branch=master)\n[![Code Climate](https://codeclimate.com/github/nashwaan/xml-js/badges/gpa.svg)](https://codeclimate.com/github/nashwaan/xml-js)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/f6ed5dd79a5b4041bfd2732963c4d09b)](https://www.codacy.com/app/ysf953/xml-js?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=nashwaan/xml-js&amp;utm_campaign=Badge_Grade)\n\n[![npm](http://img.shields.io/npm/v/xml-js.svg)](https://www.npmjs.com/package/xml-js)\n[![License](https://img.shields.io/npm/l/xml-js.svg)](LICENSE)\n[![Dependency Status](https://david-dm.org/nashwaan/xml-js.svg)](https://david-dm.org/nashwaan/xml-js)\n[![Package Quality](http://npm.packagequality.com/shield/xml-js.svg)](http://packagequality.com/#?package=xml-js)\n\n# Synopsis\n\n![Convert XML ↔ JS/JSON as compact or non-compact](http://nashwaan.github.io/xml-js/images/synopsis.svg)\n<!---![Convert XML ↔ JS/JSON as compact or non-compact](/synopsis.png?raw=true \"Synopsis Diagram\")-->\n\n# Motivation\n\nThere are many XML to JavaScript object / JSON converters out there, but could not satisfy the following requirements:\n\n* **Maintain Order of Elements**:\nInstead of converting `<a/><b/><a/>` to `{a:[{},{}],b:{}}`, I wanted to preserve order of elements by doing this:\n`{\"elements\":[{\"type\":\"element\",\"name\":\"a\"},{\"type\":\"element\",\"name\":\"b\"},{\"type\":\"element\",\"name\":\"a\"}]}`.\n\n* **Fully XML Compliant**:\nCan parse: elements, attributes, texts, comments, CData, DOCTYPE, and XML declarations.\n\n* **Reversible**:\nWhether converting xml→json or json→xml, the result can be converted back to its original form.\n\n* **Minimal Dependencies**:\nThis library depends only on one external npm module.\n\n* **Change Property Key Name**:\nUsually output of XML attributes are stored in `@attr`, `_atrr`, `$attr`, `$`, or `whatever` in order to avoid conflicting with name of sub-elements.\nThis library store them in `attributes`, but most importantly, you can change this to whatever you like.\n\n* **Support Upwards Traversal**:\nBy setting `{addParent: true}` option, an extra property named `parent` will be generated along each element so that its parent can be referenced.\nTherefore, anywhere during the traversal of an element, its children **and** its parent can be easily accessed.\n\n* **Portable Code**:\nWritten purely in JavaScript which means it can be used in Node environment and **browser** environment (via bundlers like browserify/JSPM/Webpack).\n\n* **Support Command Line**:\nTo quickly convert xml or json files, this module can be installed globally or locally (i.e. use it as [script](https://docs.npmjs.com/misc/scripts) in package.json).\n\n* **Typings Info Included**:\nSupport type checking and code suggestion via intellisense.\nThanks to the wonderful efforts by [DenisCarriere](https://github.com/DenisCarriere)\n\n## Compact vs Non-Compact\n\nMost XML to JSON convertors (including online convertors) convert `<a/>` to some compact output like `{\"a\":{}}`\ninstead of non-compact output like `{\"elements\":[{\"type\":\"element\",\"name\":\"a\"}]}`.\n\nWhile compact output might work in most situations, there are cases when elements of different names are mixed inside a parent element. Lets use `<a x=\"1\"/><b x=\"2\"/><a x=\"3\"/>` as an example.\nMost converters will produce compact like `{a:[{_:{x:\"1\"}},{_:{x:\"3\"}}], b:{_:{x:\"2\"}}}`,\nwhich has merged both `<a>` elements into an array! If you try to convert this back to xml, you will get `<a x=\"1\"/><a x=\"3\"/><b x=\"2\"/>`\nwhich has not preserved the order of elements! This is an inherit limitation in the compact representation\nbecause output like `{a:{_:{x:\"1\"}}, b:{_:{x:\"2\"}}, a:{_:{x:\"3\"}}}` is illegal (same property name `a` should not appear twice in an object).\n\nThe non-compact output, which is supported by this library, will produce more information and always gurantees the order of the elements as they appeared in the XML file.\n\nAnother drawback of compact output is the resultant element can be an object or an array and therefore makes the client code a little awkwards in terms of the extra check needed on object type before processing.\n\nNOTE: Although non-compact output is more accurate representation of original XML than compact version, the non-compact version is verbose and consumes more space.\nThis library provides both options. Use `{compact: false}` if you are not sure because it preserves everything;\notherwise use `{compact: true}` if you want to save space and you don't care about mixing elements of same type and loosing their order.\n\n# Usage\n\n## Installation\n\n```\nnpm install --save xml-js\n```\n\nYou can also install it globally to use it as a command line convertor (see [Command Line](#command-line)).\n\n```\nnpm install --global xml-js\n```\n\n## Quick start\n\n```js\nvar convert = require('xml-js');\nvar xml =\n'<?xml version=\"1.0\" encoding=\"utf-8\"?>' +\n'<note importance=\"high\" logged=\"true\">' +\n'    <title>Happy</title>' +\n'    <todo>Work</todo>' +\n'    <todo>Play</todo>' +\n'</note>';\nvar result1 = convert.xml2json(xml, {compact: true, spaces: 4});\nvar result2 = convert.xml2json(xml, {compact: false, spaces: 4});\nconsole.log(result1, '\\n', result2);\n```\n\nTo see the result of this code, see the output above in *Synopsis* section.\n\nOr [run and edit](https://runkit.com/587874e079a2f60013c1f5ac/587874e079a2f60013c1f5ad) this code live in the browser.\n\n## Sample Conversions\n\n| XML | JS/JSON compact | JS/JSON non-compact |\n|:----|:----------------|:--------------------|\n| `<a/>` | `{\"a\":{}}` | `{\"elements\":[{\"type\":\"element\",\"name\":\"a\"}]}` |\n| `<a/><b/>` | `{\"a\":{},\"b\":{}}` | `{\"elements\":[{\"type\":\"element\",\"name\":\"a\"},{\"type\":\"element\",\"name\":\"b\"}]}` |\n| `<a><b/></a>` | `{\"a\":{\"b\":{}}}` | `{\"elements\":[{\"type\":\"element\",\"name\":\"a\",\"elements\":[{\"type\":\"element\",\"name\":\"b\"}]}]}` |\n| `<a> Hi </a>` | `{\"a\":{\"_text\":\" Hi \"}}` | `{\"elements\":[{\"type\":\"element\",\"name\":\"a\",\"elements\":[{\"type\":\"text\",\"text\":\" Hi \"}]}]}` |\n| `<a x=\"1.234\" y=\"It's\"/>` | `{\"a\":{\"_attributes\":{\"x\":\"1.234\",\"y\":\"It's\"}}}` | `{\"elements\":[{\"type\":\"element\",\"name\":\"a\",\"attributes\":{\"x\":\"1.234\",\"y\":\"It's\"}}]}` |\n| `<?xml?>` | `{\"_declaration\":{}}` | `{\"declaration\":{}}` |\n| `<?xml version=\"1.0\" encoding=\"utf-8\"?>` | `{\"_declaration\":{\"_attributes\":{\"version\":\"1.0\",\"encoding\":\"utf-8\"}}}` | `{\"declaration\":{\"attributes\":{\"version\":\"1.0\",\"encoding\":\"utf-8\"}}}` |\n| `<!--Hello, World!-->` | `{\"_comment\":\"Hello, World!\"}` | `{\"elements\":[{\"type\":\"comment\",\"comment\":\"Hello, World!\"}]}` |\n| `<![CDATA[<foo></bar>]]>` | `{\"_cdata\":\"<foo></bar>\"}` | `{\"elements\":[{\"type\":\"cdata\",\"cdata\":\"<foo></bar>\"}]}` |\n\n# API Reference\n\nThis library provides 4 functions: `js2xml()`, `json2xml()`, `xml2js()`, and `xml2json()`. Here are the usages for each one (see more details in the following sections):\n```js\nvar convert = require('xml-js');\nresult = convert.js2xml(js, options);     // to convert javascript object to xml text\nresult = convert.json2xml(json, options); // to convert json text to xml text\nresult = convert.xml2js(xml, options);    // to convert xml text to javascript object\nresult = convert.xml2json(xml, options);  // to convert xml text to json text\n```\n\n## Convert JS object / JSON → XML\n\nTo convert JavaScript object to XML text, use `js2xml()`. To convert JSON text to XML text, use `json2xml()`.\n\n```js\nvar convert = require('xml-js');\nvar json = require('fs').readFileSync('test.json', 'utf8');\nvar options = {ignoreComment: true, spaces: 4};\nvar result = convert.json2xml(json, options);\nconsole.log(result);\n```\n\n### Options for Converting JS object / JSON → XML\n\nThe below options are applicable for both `js2xml()` and `json2xml()` functions.\n\n| Option                | Default | Description |\n|:----------------------|:--------|:------------|\n| `spaces`              | `0`     | Number of spaces to be used for indenting XML output. Passing characters like `' '` or `'\\t'` are also accpeted. |\n| `compact`             | `false` | Whether the *input* object is in compact form or not. |\n| `fullTagEmptyElement` | `false` | Whether to produce element without sub-elements as full tag pairs `<a></a>` rather than self closing tag `<a/>`. |\n| `indentCdata`         | `false` | Whether to write CData in a new line and indent it. Will generate `<a>\\n <![CDATA[foo]]></a>` instead of `<a><![CDATA[foo]]></a>`. See [discussion](https://github.com/nashwaan/xml-js/issues/14) |\n| `ignoreDeclaration`   | `false` | Whether to ignore writing declaration directives of xml. For example, `<?xml?>` will be ignored. |\n| `ignoreAttributes`    | `false` | Whether to ignore writing attributes of the elements. For example, `x=\"1\"` in `<a x=\"1\"></a>` will be ignored |\n| `ignoreComment`       | `false` | Whether to ignore writing comments of the elements. That is, no `<!--  -->` will be generated. |\n| `ignoreCdata`         | `false` | Whether to ignore writing CData of the elements. That is, no `<![CDATA[ ]]>` will be generated. |\n| `ignoreDoctype`       | `false` | Whether to ignore writing Doctype of the elements. That is, no `<!DOCTYPE >` will be generated. |\n| `ignoreText`          | `false` | Whether to ignore writing texts of the elements. For example, `hi` text in `<a>hi</a>` will be ignored. |\n\n## Convert XML → JS object / JSON\n\nTo convert XML text to JavaScript object, use `xml2js()`. To convert XML text to JSON text, use `xml2json()`.\n\n```js\nvar convert = require('xml-js');\nvar xml = require('fs').readFileSync('test.xml', 'utf8');\nvar options = {ignoreComment: true, alwaysChildren: true};\nvar result = convert.xml2js(xml, options); // or convert.xml2json(xml, options)\nconsole.log(result);\n```\n\n### Options for Converting XML → JS object / JSON\n\nThe below options are applicable for both `xml2js()` and `xml2json()` functions.\n\n| Option              | Default | Description |\n|:--------------------|:--------|:------------|\n| `compact`           | `false` | Whether to produce detailed object or compact object. |\n| `trim`              | `false` | Whether to trim white space characters that may exist before and after the text. |\n| `sanitize`          | `false` | Whether to replace `&` `<` `>` `\"` `'` with `&amp;` `&lt;` `&gt;` `&quot;` `&#39;` respectively in the resultant text. |\n| `nativeType`        | `false` | Whether to attempt converting text of numerals or of boolean values to native type. For example, `\"123\"` will be `123` and `\"true\"` will be `true` |\n| `addParent`         | `false` | Whether to add `parent` property in each element object that points to parent object. |\n| `alwaysArray`       | `false` | Whether to always put sub element, even if it is one only, as an item inside an array. `<a><b/></a>` will be `a:[{b:[{}]}]` rather than `a:{b:{}}` (applicable for compact output only). |\n| `alwaysChildren`    | `false` | Whether to always generate `elements` property even when there are no actual sub elements. `<a></a>` will be `{\"elements\":[{\"type\":\"element\",\"name\":\"a\",\"elements\":[]}]}` rather than `{\"elements\":[{\"type\":\"element\",\"name\":\"a\"}]}` (applicable for non-compact output). |\n| `ignoreDeclaration` | `false` | Whether to ignore writing declaration property. That is, no `declaration` property will be generated. |\n| `ignoreAttributes`  | `false` | Whether to ignore writing attributes of elements.That is, no `attributes` property will be generated. |\n| `ignoreComment`     | `false` | Whether to ignore writing comments of the elements. That is, no `comment` will be generated. |\n| `ignoreCdata`       | `false` | Whether to ignore writing CData of the elements. That is, no `cdata` will be generated. |\n| `ignoreDoctype`     | `false` | Whether to ignore writing Doctype of the elements. That is, no `doctype` will be generated. |\n| `ignoreText`        | `false` | Whether to ignore writing texts of the elements. That is, no `text` will be generated. |\n\nThe below option is applicable only for `xml2json()` function.\n\n| Option              | Default | Description |\n|:--------------------|:--------|:------------|\n| `spaces`            | `0`     | Number of spaces to be used for indenting JSON output. Passing characters like `' '` or `'\\t'` are also accpeted. |\n\n## Options for Changing Key Names\n\nTo change default key names in the output object or the default key names assumed in the input JavaScript object / JSON, use the following options:\n\n| Option              | Default | Description |\n|:--------------------|:--------|:------------|\n| `declarationKey`    | `\"declaration\"` or `\"_declaration\"` | Name of the property key which will be used for the declaration. For example, if `declarationKey: '$declaration'` then output of `<?xml?>` will be `{\"$declaration\":{}}` *(in compact form)* |\n| `attributesKey`     | `\"attributes\"` or `\"_attributes\"` | Name of the property key which will be used for the attributes. For example, if `attributesKey: '$attributes'` then output of `<a x=\"hello\"/>` will be `{\"a\":{$attributes:{\"x\":\"hello\"}}}` *(in compact form)* |\n| `textKey`           | `\"text\"` or `\"_text\"` | Name of the property key which will be used for the text. For example, if `textKey: '$text'` then output of `<a>hi</a>` will be `{\"a\":{\"$text\":\"Hi\"}}` *(in compact form)* |\n| `cdataKey`          | `\"cdata\"` or `\"_cdata\"` | Name of the property key which will be used for the cdata. For example, if `cdataKey: '$cdata'` then output of `<![CDATA[1 is < 2]]>` will be `{\"$cdata\":\"1 is < 2\"}` *(in compact form)* |\n| `doctypeKey`        | `\"doctype\"` or `\"_doctype\"` | Name of the property key which will be used for the doctype. For example, if `doctypeKey: '$doctype'` then output of `<!DOCTYPE foo>` will be `{\"$doctype\":\" foo}` *(in compact form)* |\n| `commentKey`        | `\"comment\"` or `\"_comment\"` | Name of the property key which will be used for the comment. For example, if `commentKey: '$comment'` then output of `<!--note-->` will be `{\"$comment\":\"note\"}` *(in compact form)* |\n| `parentKey`         | `\"parent\"` or `\"_parent\"` | Name of the property key which will be used for the parent. For example, if `parentKey: '$parent'` then output of `<a></b></a>` will be `{\"a\":{\"b\":{$parent:_points_to_a}}}` *(in compact form)* |\n| `typeKey`           | `\"type\"` | Name of the property key which will be used for the type. For example, if `typeKey: '$type'` then output of `<a></a>` will be `{\"elements\":[{\"$type\":\"element\",\"name\":\"a\"}]}` *(in non-compact form)* |\n| `nameKey`           | `\"name\"` | Name of the property key which will be used for the name. For example, if `nameKey: '$name'` then output of `<a></a>` will be `{\"elements\":[{\"type\":\"element\",\"$name\":\"a\"}]}` *(in non-compact form)* |\n| `elementsKey`       | `\"elements\"` | Name of the property key which will be used for the elements. For example, if `elementsKey: '$elements'` then output of `<a></a>` will be `{\"$elements\":[{\"type\":\"element\",\"name\":\"a\"}]}` *(in non-compact form)* |\n\nTwo default values mean the first is used for *non-compact* output and the second is for *compact* output.\n\n> **TIP**: You probably want to set `{textKey: 'value', cdataKey: 'value', commentKey: 'value'}` for *non-compact* output\n> to make it more consistent and easier for your client code to go through the contents of text, cdata, and comment.\n\n# Command Line\n\nBecause any good library should support command line usage, this library is no difference.\n\n## As Globally Accessible Command\n\n```\nnpm install -g xml-js                       // install this library globally\nxml-js test.json --spaces 4                 // xml result will be printed on screen\nxml-js test.json --spaces 4 --out test.xml  // xml result will be saved to test.xml\nxml-js test.xml --spaces 4                  // json result will be printed on screen\nxml-js test.xml --spaces 4 --out test.json  // json result will be saved to test.json\n```\n\n## As Locally Accessible Command\n\nIf you want to use it as script in package.json (can also be helpful in [task automation via npm scripts](http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/))\n\n```\nnpm install --save xml-js   // no need to install this library globally\n```\n\nIn package.json, write a script:\n```json\n...\n  \"dependencies\": {\n    \"xml-js\": \"latest\"\n  },\n  \"scripts\": {\n     \"convert\": \"xml-js test.json --spaces 4\"\n  }\n```\n\n```\nnpm run convert             // task 'scripts.convert' will be executed\n```\n\n## CLI Arguments\n\n```\nUsage: xml-js src [options]\n\n  src                  Input file that need to be converted.\n                       Conversion type xml->json or json->xml will be inferred from file extension.\n\nOptions:\n  --help, -h           Display this help content.\n  --version, -v        Display version number of this module.\n  --out                Output file where result should be written.\n  --spaces             Specifies amount of space indentation in the output.\n  --full-tag           XML elements will always be in <a></a> form.\n  --no-decl            Declaration instruction <?xml ..?> will be ignored.\n  --no-attr            Attributes of elements will be ignored.\n  --no-text            Texts of elements will be ignored.\n  --no-cdata           CData of elements will be ignored.\n  --no-doctype         DOCTYPE of elements will be ignored.\n  --no-comment         Comments of elements will be ignored.\n  --trim               Any whitespaces surrounding texts will be trimmed.\n  --compact            JSON is in compact form.\n  --sanitize           Special xml characters will be replaced with entity codes.\n  --native-type        Numbers and boolean will be converted (coreced) to native type instead of text.\n  --always-array       Every element will always be an array type (applicable if --compact is set).\n  --always-children    Every element will always contain sub-elements (applicable if --compact is not set).\n  --text-key           To change the default 'text' key.\n  --cdata-key          To change the default 'cdata' key.\n  --doctype-key        To change the default 'doctype' key.\n  --comment-key        To change the default 'comment' key.\n  --attributes-key     To change the default 'attributes' key.\n  --declaration-key    To change the default 'declaration' key.\n  --type-key           To change the default 'type' key (applicable if --compact is not set).\n  --name-key           To change the default 'name' key (applicable if --compact is not set).\n  --elements-key       To change the default 'elements' key (applicable if --compact is not set).\n```\n\n# Contribution\n\n## Testing\n\nTo perform tests on this project, download the full repository from GitHub (not from npm) and then do the following:\n\n```\ncd xml-js\nnpm install\nnpm test\n```\nFor live testing, use `npm start` instead of `npm test`.\n\n## Reporting\n\nUse [this link](https://github.com/nashwaan/xml-js/issues) to report an issue or bug. Please include a sample code where the code is failing.\n\n# License\n\n[MIT](https://github.com/nashwaan/xml-js/blob/master/LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nashwaan/xml-js.git"
  },
  "scripts": {
    "bundle:jasmine": "globify test/*_test.js --watch --verbose --list --outfile test/browse-jasmine/bundle.js",
    "coverage": "npm-run-all coverage:*",
    "coverage:a-step": "npm run istanbul",
    "coverage:codacy": "cross-env CODACY_PROJECT_TOKEN=0207815122ea49a68241d1aa435f21f1 cat ./test/browse-coverage/lcov.info | codacy-coverage",
    "coverage:codeclimate": "cross-env CODECLIMATE_REPO_TOKEN=60848a077f9070acf358b0c7145f0a2698a460ddeca7d8250815e75aa4333f7d codeclimate-test-reporter < test\\browse-coverage\\lcov.info",
    "coverage:coveralls": "cat ./test/browse-coverage/lcov.info | coveralls",
    "debug": "nodemon --inspect --watch lib/ --watch test/ --debug-brk test/index.js",
    "debug:cli": "nodemon --inspect --watch lib/ --debug-brk index.js -- --help",
    "deploy": "npm-run-all --serial coverage git:commit",
    "git:commit": "git add . && git commit -a -m \"Committed by npm script.\" && git push origin master",
    "git:push": "git push origin master",
    "istanbul": "istanbul cover --dir test/browse-coverage -x test/browse-** test/index.js",
    "jasmine": "jasmine JASMINE_CONFIG_PATH=./test/jasmine.json",
    "live": "npm-run-all --parallel live:* open:*",
    "live:istanbul": "browser-sync start --port 9992 --server test/browse-coverage/lcov-report/ --files test/browse-coverage/lcov-report/ --no-open --no-ui --no-online",
    "live:jasmine": "browser-sync start --port 9991 --server test/browse-jasmine/ --files test/browse-jasmine/ --no-open --no-ui --no-online",
    "open:istanbul": "biased-opener --browser chrome http://localhost:9992",
    "open:jasmine": "biased-opener --browser chrome http://localhost:9991",
    "prepublish": "npm run test",
    "start": "npm-run-all --parallel bundle:jasmine watch:istanbul live:* open:*",
    "test": "npm run jasmine && npm run test:types",
    "test:types": "tsc -p ./types",
    "watch:istanbul": "watch \"npm run istanbul\" lib/ test/ --ignoreDirectoryPattern=/browse-.+/",
    "watch:jasmine": "watch \"npm run jasmine\" lib/ test/"
  },
  "types": "./types/index.d.ts",
  "version": "1.2.2"
}
